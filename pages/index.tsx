import { GetStaticProps } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import { Dayjs } from 'dayjs';

import { Box } from '@mui/material';

import { IWeeklyMenuWithId } from '../models/weekly-menu.model';
import { getLatestWeeklyMenu } from '../mongodb/db-weekly-menu';
import WeeklyMenu from '../components/menus/weekly-menu';
import WeekPicker from '../components/ui/week-picker';

type HomePageProps = {
  latestWeeklyMenu?: IWeeklyMenuWithId;
};

export default function Home(props: HomePageProps) {
  const { latestWeeklyMenu } = props;
  // const createWeeklyMenuHandler = () => {
  //   fetch('/api/weekly-menus', {
  //     method: 'POST',
  //     body: JSON.stringify(weeklyMenuSeed),
  //     headers: { 'Content-Type': 'application/json' },
  //   })
  //     .then((res) => res.json())
  //     .then((data) => {
  //       console.log(data);
  //     });
  // };

  const [weeklyMenu, setWeeklyMenu] = useState(latestWeeklyMenu);

  const onWeekChange = async (newWeek: Dayjs) => {
    console.log('In onWeekChange');
    console.log(newWeek);

    const response = await fetch(
      `/api/weekly-menus?date=${newWeek.format('YYYY-MM-DD')}`
    );

    if (response.ok) {
      const body = await response.json();
      console.log(body);

      const menu: IWeeklyMenuWithId = body.weeklyMenu;
      console.log(menu);

      setWeeklyMenu(menu);
    } else {
      setWeeklyMenu(undefined);
    }
  };

  // const fetchById = async () => {
  //   fetch('/api/weekly-menus?id=63e6b620dc7885cc3bfb95b1').then((res) => {
  //     console.log(res);
  //   });
  // };

  return (
    <>
      <Head>
        <title>Menu Helper</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.svg" />
      </Head>
      <main>
        {/* <button onClick={fetchById}>Fetch by id</button> */}
        <Box>
          <WeekPicker onWeekChange={onWeekChange} />
          {weeklyMenu ? (
            <WeeklyMenu weeklyMenu={weeklyMenu} />
          ) : (
            <>
              It looks like you have no menu for this week
              <button>Create weekly menu</button>
            </>
          )}
        </Box>
      </main>
    </>
  );
}

// export const getServerSideProps: GetServerSideProps = async () => {
//   const latestWeeklyMenu = await getLatestWeeklyMenu();
// const staticReturn: {props: any, revalidate:} = {
//   props : {
//     latestWeeklyMenu,
//   }
// }

//   if (latestWeeklyMenu) {
//     staticReturn.revalidate = 2;
//   }

//   return {};
// };

export const getStaticProps: GetStaticProps = async () => {
  const latestWeeklyMenu = await getLatestWeeklyMenu();
  const staticReturn: { props: any; revalidate: false | number } = {
    props: {
      latestWeeklyMenu,
    },
    revalidate: false,
  };

  if (latestWeeklyMenu) {
    staticReturn.revalidate = 86400;
  }

  return staticReturn;
};
